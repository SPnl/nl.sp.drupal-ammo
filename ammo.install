<?php

/**
 * Implements hook_schema().
 */
function ammo_schema() {
  $schema['ammo_meetings'] = array(
    'description' => 'Meetings have documents that get amendments and motions.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'date' => array(
        'description' => 'The meeting date.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
      ),
      'submission_closing_date' => array(
        'description' => 'The date amendments and motions can no longer be submitted/changed.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
      ),
      'withdrawal_closing_date' => array(
        'description' => 'The date amendments and motions can no longer be withdrawn.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
      ),
      'title' => array(
        'description' => 'Event title.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'description' => array(
        'description' => 'Event description.',
        'type' => 'text',
      ),
      'email' => array(
        'description' => 'Contact e-mailadres.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'no_member_owners' => array(
        'type' => 'int',
        'size' => 'tiny',
      ),
      'hide_state' => array(
        'type' => 'int',
        'size' => 'tiny',
      ),
      'hide_advice' => array(
        'type' => 'int',
        'size' => 'tiny',
      ),
      'hide_meeting' => array(
        'type' => 'int',
        'size' => 'tiny',
      ),
      'no_motions' => array(
        'type' => 'int',
        'size' => 'tiny',
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  $schema['ammo_documents'] = array(
    'description' => 'Documents get amendments and motions.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Document title.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'description' => array(
        'description' => 'Document description.',
        'type' => 'text',
      ),
      'meeting_id' => array(
        'description' => 'Id of the meeting this document will be amended.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  $schema['ammo_amendments'] = array(
    'description' => 'Documents get amendmended.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'chapterized_id' => array(
        'description' => 'Amendment id by chapter.',
        'type' => 'int',
        'size' => 'big',
      ),
      'document_id' => array(
        'description' => 'Id of the document that is amended.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'State of the amendment.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'chapter' => array(
        'type' => 'int',
        'size' => 'small',
      ),
      'page' => array(
        'type' => 'int',
        'size' => 'small',
      ),
      'line' => array(
        'type' => 'int',
        'size' => 'small',
      ),
      'amendment_text' => array(
        'description' => 'The amendment text.',
        'type' => 'text',
      ),
      'supplement' => array(
        'description' => 'Supplementary information about the amendment.',
        'type' => 'text',
      ),
      'advice' => array(
        'description' => 'Advice to voters about the amendment.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'advice_supplement' => array(
        'description' => 'Supplementary information about the advice.',
        'type' => 'text',
      ),
      'state_supplement' => array(
        'description' => 'Supplementary information about the state change.',
        'type' => 'text',
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  $schema['ammo_motions'] = array(
    'description' => 'Events get motions.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'motion_id' => array(
        'description' => 'Motion id by meeting.',
        'type' => 'int',
        'size' => 'big',
      ),
      'meeting_id' => array(
        'description' => 'Id of the meeting where the motion is placed.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'State of the motion.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'consideration_opening' => array(
        'description' => 'Opening line of the consideration.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'consideration_body' => array(
        'description' => 'Body text of the consideration.',
        'type' => 'text',
      ),
      'follow_up_opening' => array(
        'description' => 'Opening line of the follow_up.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'follow_up_body' => array(
        'description' => 'Body text of the follow_up.',
        'type' => 'text',
      ),
      'supplement' => array(
        'description' => 'Supplementary information about the motion.',
        'type' => 'text',
      ),
      'advice' => array(
        'description' => 'Advice to voters about the motion.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'advice_supplement' => array(
        'description' => 'Supplementary information about the advice.',
        'type' => 'text',
      ),
      'advice_consideration_opening' => array(
        'description' => 'Advice opening line of the consideration.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'advice_consideration_body' => array(
        'description' => 'Advice body text of the consideration.',
        'type' => 'text',
      ),
      'advice_follow_up_opening' => array(
        'description' => 'Advice opening line of the advice follow up.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'advice_follow_up_body' => array(
        'description' => 'Advice body text of the advice follow up.',
        'type' => 'text',
      ),
      'state_supplement' => array(
        'description' => 'Supplementary information about the state change.',
        'type' => 'text',
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  $schema['ammo_contact_relations'] = array(
    'description' => 'Motions or amendments can be backed or owned by members and branches.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'target_type' => array(
        'description' => 'Target (amendment, motion).',
        'type' => 'varchar',
        'length' => '255',
      ),
      'target_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'relation_type' => array(
        'description' => 'Type of relation (owner, backer).',
        'type' => 'varchar',
        'length' => '255',
      ),
      'contact_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'contact_email' => array(
        'description' => 'Email address of contact.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'contact_type' => array(
        'description' => 'Type of contact (member, branch).',
        'type' => 'varchar',
        'length' => '255',
      ),
      'contact_display_name' => array(
        'description' => 'Name of contact.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'branch_id' => array(
        'description' => 'Id of the local branch.',
        'type' => 'int',
      ),
      'branch_display_name' => array(
        'description' => 'Name of branch.',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(
      'contact_relation' => array('target_type', 'target_id', 'relation_type', 'contact_id'),
    ),
  );

  return $schema;
}

/**
 * Add chapterized_id to  {ammo_amendments} table.
 */
function ammo_update_7001() {
  $spec = array(
    'description' => 'Amendment id by chapter.',
    'type' => 'int',
    'size' => 'big',
  );
  db_add_field('ammo_amendments', 'chapterized_id', $spec);

  // Add unique key for chapter and chapterized_id.
  db_add_unique_key('ammo_amendments', 'chapterized_id', array('chapter', 'chapterized_id'));

  // Enable shurly.
  if (!module_exists('shurly')) {
    module_enable(array('shurly'));
  }
}

/**
 * Add hide_meeting to  {ammo_meetings} table.
 */
function ammo_update_7002() {
  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
  );
  db_add_field('ammo_meetings', 'hide_meeting', $spec);
}

/**
 * Add motion_id to  {ammo_motions} table.
 */
function ammo_update_7003() {
  $spec = array(
    'description' => 'Motion id by meeting.',
    'type' => 'int',
    'size' => 'big',
  );
  db_add_field('ammo_motions', 'motion_id', $spec);

  // Add unique key for meeting and motion_id.
  db_add_unique_key('ammo_motions', 'motion_id', array('meeting_id', 'motion_id'));
}

/**
 * Fix chapterized_id key in {ammo_amendments} table.
 */
function ammo_update_7004() {
  // Remove existing key.
  db_drop_unique_key('ammo_amendments', 'chapterized_id');
  // Add unique key for chapter and chapterized_id.
  db_add_unique_key('ammo_amendments', 'chapterized_id', array('document_id', 'chapter', 'chapterized_id'));
}

/**
 * Add hide_state to  {ammo_meetings} table.
 */
function ammo_update_7005() {
  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
  );
  db_add_field('ammo_meetings', 'hide_state', $spec);
}

/**
 * Add no_motions to  {ammo_meetings} table.
 */
function ammo_update_7006() {
  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
  );
  db_add_field('ammo_meetings', 'no_motions', $spec);
}

/**
 * Add state change field to  {ammo_motions} and {ammo_amendments} tables.
 */
function ammo_update_7007() {
  $schema = ammo_schema();
  if (!db_field_exists('ammo_amendments', 'state_supplement')) {
    $spec = $schema['ammo_amendments']['fields']['state_supplement'];
    db_add_field('ammo_amendments', 'state_supplement', $spec);
  }
  if (!db_field_exists('ammo_motions', 'state_supplement')) {
    $spec = $schema['ammo_motions']['fields']['state_supplement'];
    db_add_field('ammo_motions', 'state_supplement', $spec);
  }
}
