<?php

/**
 * ammo_menu
 * ammo_theme
 * ammo_overview_content
 * ammo_entity_info
 */

/**
 * Implements hook_init().
 */
function ammo_init() {
  module_load_include("inc", "ammo", "ammo");
}

function ammo_menu() {
  $items = array();

  $items['ammo'] = array(
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_is_logged_in',
    'page callback' => 'ammo_intropage',
  );

  $items['ammo/ammo'] = array(
    'title' => 'Start',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );

  $items['ammo/amendment'] = array(
    'title' => 'Amendement indienen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_amendment_form', 2, 3),
    'file' => 'amendment.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ammo_add_access',
    'weight' => -2,
  );

  $items['ammo/motion'] = array(
    'title' => 'Motie indienen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_motion_form', 2, 3),
    'file' => 'motion.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ammo_add_access',
    'weight' => -1,
  );

  $items['ammo/amendments'] = array(
    'title' => 'Overzicht amendementen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_overview_amendments_form', 2),
    'file' => 'amendments.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_is_logged_in',
    'weight' => 0,
  );

  $items['ammo/motions'] = array(
    'title' => 'Overzicht moties',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_overview_motions_form', 2),
    'file' => 'motions.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_is_logged_in',
    'weight' => 1,
  );

  $items['ammo/meeting'] = array(
    'title' => 'Bijeenkomst',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_meeting_form'),
    'file' => 'meeting.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ammo_superadmin_access',
    'weight' => 4,
  );

  $items['ammo/document'] = array(
    'title' => 'Document',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_document_form'),
    'file' => 'document.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ammo_superadmin_access',
    'weight' => 5,
  );

  $items['ammo/print'] = array(
    'title' => 'Print',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_print_form'),
    'access callback' => 'ammo_admin_access',
    'file' => 'print.form.inc',
    'weight' => 5,
  );

  $items['ammo/support/%/%/%/%'] = array(
    'title' => 'Steun',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_support_form', 2, 3, 4, 5),
    'file' => 'support.form.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  $items['ammo/autocomplete_members/%/%'] = array(
    'page callback' => 'ammo_autocomplete_members',
    'page arguments' => array(2, 3),
    'file' => 'ammo.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

function ammo_permission() {
  return array(
    'administer ammo' => array(
      'title' => 'Beheer ammo',
    ),
    'administer amendments and motions' => array(
      'title' => 'Beheer amendementen en moties',
    ),
    'add amendments and motions' => array(
      'title' => 'Voeg amendementen en moties toe',
    ),
  );
}

function ammo_superadmin_access() {
  return user_access('administer ammo');
}

function ammo_admin_access() {
  return user_access('administer ammo') || user_access('administer amendments and motions');
}

function ammo_add_access() {
  return user_access('administer ammo') || user_access('administer amendments and motions') || user_access('add amendments and motions');
}

function ammo_theme() {
  $theme = array(
    'overview_amendments' => array(
      'template' => 'amendments',
      'variables' => array(
      ),
    ),
    'overview_motions' => array(
      'template' => 'motions',
      'variables' => array(
      ),
    ),
    'amendment_form' => array(
      'render element' => 'form',
      'template' => 'amendment-form',
    ),
    'motion_form' => array(
      'render element' => 'form',
      'template' => 'motion-form',
    ),
    'meeting_form' => array(
      'render element' => 'form',
      'template' => 'meeting-form',
    ),
    'document_form' => array(
      'render element' => 'form',
      'template' => 'document-form',
    ),
    'amendment' => array(
      'variables' => array(),
      'template' => 'amendment',
    ),
    'motion' => array(
      'variables' => array(),
      'template' => 'motion',
    ),
    'intropage' => array(
      'variables' => array(),
      'template' => 'intropage',
    ),
    'print_amendments_by_location' => array(
      'variables' => array(),
      'template' => 'print_amendments_by_location',
    ),
    'print_amendments_by_number' => array(
      'variables' => array(),
      'template' => 'print_amendments_by_number',
    ),
    'print_motions_by_branch' => array(
      'variables' => array(),
      'template' => 'print_motions_by_branch',
    ),
    'print_motions_by_number' => array(
      'variables' => array(),
      'template' => 'print_motions_by_number',
    ),
  );
  return $theme;
}

function template_preprocess_amendment(&$variables) {
  global $user;
  if (isset($variables['entity_id'])) {
    $entity = entity_load_single('amendment', $variables['entity_id']);
    $document = entity_load_single('document', $entity->document_id);
    $meeting = entity_load_single('meeting', $document->meeting_id);
    $meeting_date = new DateTime($meeting->date);
    $meeting_date_formatted = $meeting_date->format('d F Y');
    $owners_member = ammo_get_related_contacts($entity->id, 'amendment', 'owner', 'member'); 
    $owners_branch = ammo_get_related_contacts($entity->id, 'amendment', 'owner', 'branch'); 
    $backers = ammo_get_related_contacts($entity->id, 'amendment', 'backer', 'member'); 
    $first_owner = ammo_get_first_owner('amendment', $entity->id);
    $owned_by_user = ammo_is_related($entity->id, 'amendment', 'owner', 'member');
    $backed_by_user = ammo_is_related($entity->id, 'amendment', 'backer', 'member');
    $branches = ammo_get_afdelingen($user->name);
    if (!empty($branches)) {
      $supported_branches = FALSE;
      $unsupported_branches = FALSE;
      foreach ($branches as $contact_id => $contact_display_name) {
        if (array_key_exists($contact_id, $owners_branch)) {
          $supported_branches = TRUE;
        }
        else {
          $unsupported_branches = TRUE;
        }
      }
    }
    $vars = array(
      'document_id' => $entity->document_id,
      'chapter' => $entity->chapter,
      'page' => $entity->page,
      'line' => $entity->line,
      'amendment_text' => $entity->amendment_text,
      'supplement' => $entity->supplement,
      'advice' => $entity->advice,
      'advice_supplement' => $entity->advice_supplement,
      'state' => $entity->state,
      'document_title' => $document->title,
      'document_description' => $document->description,
      'meeting_id' => $meeting->id,
      'meeting_title' => $meeting->title,
      'meeting_description' => $meeting->description,
      'meeting_date' => $meeting_date_formatted,
      'support_access' => ammo_support_access($meeting->id),
      'edit_access' => ammo_edit_access($meeting->id, $first_owner['branch_id']),
      'withdraw_access' => ammo_withdraw_access($meeting->id),
      'admin_access' => ammo_admin_access(),
      'superadmin_access' => ammo_superadmin_access(),
      'owners_member' => $owners_member,
      'owners_branch' => $owners_branch,
      'backers' => $backers,
      'backed_by_user' => $backed_by_user,
      'owned_by_user' => $owned_by_user,
      'supported_branches' => $supported_branches,
      'unsupported_branches' => $unsupported_branches,
      'removable_member_owners' => ammo_removable_member_owners('amendment', $entity->id), 
    );
    foreach($vars as $key => &$value) {
      if (in_array($key, array('owners_member', 'owners_branch', 'first_owner', 'backers'))) continue;
      $value = nl2br(check_plain($value));
    }
    $variables = $variables + $vars;
  }
}

function template_preprocess_motion(&$variables) {
  global $user;
  if (isset($variables['entity_id'])) {
    $entity = entity_load_single('motion', $variables['entity_id']);
    $meeting = entity_load_single('meeting', $entity->meeting_id);
    $meeting_date = new DateTime($meeting->date);
    $meeting_date_formatted = $meeting_date->format('d F Y');
    $owners_member = ammo_get_related_contacts($entity->id, 'motion', 'owner', 'member'); 
    $owners_branch = ammo_get_related_contacts($entity->id, 'motion', 'owner', 'branch'); 
    $backers = ammo_get_related_contacts($entity->id, 'motion', 'backer'); 
    $backed_by_user = ammo_is_related($entity->id, 'motion', 'backer', 'member');
    $owned_by_user = ammo_is_related($entity->id, 'motion', 'owner', 'member');
    $first_owner = ammo_get_first_owner('motion', $entity->id);
    $branches = ammo_get_afdelingen($user->name);
    $supported_branches = FALSE;
    $unsupported_branches = FALSE;
    if (!empty($branches)) {
      $supported_branches = FALSE;
      $unsupported_branches = FALSE;
      foreach ($branches as $contact_id => $contact_display_name) {
        if (array_key_exists($contact_id, $owners_branch)) {
          $supported_branches = TRUE;
        }
        else {
          $unsupported_branches = TRUE;
        }
      }
    }
    $vars = array(
      'meeting_id' => $entity->meeting_id,
      'consideration_opening' => $entity->consideration_opening,
      'consideration_body' => $entity->consideration_body,
      'follow_up_opening' => $entity->follow_up_opening,
      'follow_up_body' => $entity->follow_up_body,
      'supplement' => $entity->supplement,
      'advice' => $entity->advice,
      'advice_consideration_opening' => $entity->advice_consideration_opening,
      'advice_consideration_body' => $entity->advice_consideration_body,
      'advice_follow_up_opening' => $entity->advice_follow_up_opening,
      'advice_follow_up_body' => $entity->advice_follow_up_body,
      'advice_supplement' => $entity->advice_supplement,
      'state' => $entity->state,
      'meeting_title' => $meeting->title,
      'meeting_description' => $meeting->description,
      'meeting_date' => $meeting_date_formatted,
      'support_access' => ammo_support_access($meeting->id),
      'edit_access' => ammo_edit_access($meeting->id, $first_owner['branch_id']),
      'withdraw_access' => ammo_withdraw_access($meeting->id),
      'admin_access' => ammo_admin_access(),
      'superadmin_access' => ammo_superadmin_access(),
      'owners_member' => $owners_member,
      'owners_branch' => $owners_branch,
      'backers' => $backers,
      'backed_by_user' => $backed_by_user,
      'owned_by_user' => $owned_by_user,
      'supported_branches' => $supported_branches,
      'unsupported_branches' => $unsupported_branches,
      'removable_member_owners' => ammo_removable_member_owners('motion', $entity->id), 
    );
    foreach($vars as $key => &$value) {
      if (in_array($key, array('owners_member', 'owners_branch', 'first_owner', 'backers'))) continue;
      $value = nl2br(check_plain($value));
    }
    $variables = $variables + $vars;
  }
}

function template_preprocess_overview_amendments(&$variables) {
  if (isset($variables['meeting_id'])) {
    $meeting = entity_load_single('meeting', $variables['meeting_id']);
    // Store meeting data.
    $data['meeting'] = array(
      'id' => $meeting->id,
      'title' => check_plain($meeting->title),
      'description' => check_plain($meeting->description),
      'date' => $meeting->date,
      'submission_closing_date' => $meeting->submission_closing_date,
    );
    $documents_results = db_query("SELECT * FROM {ammo_documents} WHERE meeting_id = :meeting_id ORDER BY title", array(":meeting_id" => $variables['meeting_id']));
    foreach ($documents_results as $document) {
      // Store document data.
      $data['meeting']['documents'][$document->id] = array(
        'id' => $document->id,
        'title' => check_plain($document->title),
        'description' => check_plain($document->description),
        'meeting_id' => check_plain($document->meeting_id),
      );
      $amendments_results = db_query("SELECT id, chapter, page, state FROM {ammo_amendments} WHERE document_id = :document_id AND state != 'concept' ORDER BY chapter, page, line, id", array(":document_id" => $document->id));
      foreach ($amendments_results as $amendment) {
        // Get owners.
        $owners_member = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'member'); 
        $owners_branch = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'branch'); 
        // Store chapter data.
        $data['meeting']['documents'][$document->id]['chapters'][$amendment->chapter]['nr'] = $amendment->chapter;
        // Store page data.
        $data['meeting']['documents'][$document->id]['chapters'][$amendment->chapter]['pages'][$amendment->page]['nr'] = $amendment->page;
        // Store amendment data.
        $data['meeting']['documents'][$document->id]['chapters'][$amendment->chapter]['pages'][$amendment->page]['amendments'][$amendment->id] = array(
          'id' => $amendment->id,
          'chapter' => check_plain($amendment->chapter),
          'page' => check_plain($amendment->page),
          'owners_member' => $owners_member,
          'owners_branch' => $owners_branch,
          'state' => $amendment->state,
        );
      }
    }
    $variables = $variables + $data;
  }
}

function template_preprocess_overview_motions(&$variables) {
  if (isset($variables['meeting_id'])) {
    $meeting = entity_load_single('meeting', $variables['meeting_id']);
    $data['meeting'] = array(
      'id' => $meeting->id,
      'meeting_id' => $meeting->id,
      'title' => check_plain($meeting->title),
      'description' => check_plain($meeting->description),
      'date' => $meeting->date,
      'submission_closing_date' => $meeting->submission_closing_date,
    );
    $motions_results = db_query("SELECT id, state FROM {ammo_motions} WHERE meeting_id = :meeting_id AND state != 'concept'", array(":meeting_id" => $meeting->id));
    foreach ($motions_results as $motion) {
      $owners_member = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'member'); 
      $owners_branch = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'branch'); 
      $first_owner = ammo_get_first_owner('motion', $motion->id);
      $data['meeting']['branches'][$first_owner['branch_id']]['info'] = $first_owner;
      $data['meeting']['branches'][$first_owner['branch_id']]['motions'][$motion->id] = array(
        'id' => $motion->id,
        'owners_member' => $owners_member,
        'owners_branch' => $owners_branch,
        'state' => $motion->state,
      );
    }
    $variables = $variables + $data;
  }
}

function template_preprocess_print_amendments_by_location(&$variables) {
  $data = _ammo_preprocess_meeting_data($variables); 
  $documents_results = db_query("SELECT * FROM {ammo_documents} WHERE meeting_id = :meeting_id ORDER BY title", array(":meeting_id" => $variables['values']['meeting']));
  foreach ($documents_results as $document) {
    // Store document data.
    $data['meeting']['documents'][$document->id] = array(
      'id' => $document->id,
      'title' => check_plain($document->title),
      'description' => check_plain($document->description),
      'meeting_id' => check_plain($document->meeting_id),
    );
    $amendments_results = db_query("SELECT * FROM {ammo_amendments} WHERE document_id = :document_id AND state != 'concept' ORDER BY chapter, page, line, id", array(":document_id" => $document->id));
    foreach ($amendments_results as $amendment) {
      // Get owners.
      $owners_member = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'member'); 
      $owners_branch = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'branch'); 
      $backers = ammo_get_related_contacts($amendment->id, 'amendment', 'backer'); 
      // Store chapter data.
      $data['meeting']['documents'][$document->id]['chapters'][$amendment->chapter]['nr'] = $amendment->chapter;
      // Store page data.
      $data['meeting']['documents'][$document->id]['chapters'][$amendment->chapter]['pages'][$amendment->page]['nr'] = $amendment->page;
      // Store amendment data.
      $data['meeting']['documents'][$document->id]['chapters'][$amendment->chapter]['pages'][$amendment->page]['amendments'][$amendment->id] = array(
        'id' => $amendment->id,
        'chapter' => $amendment->chapter,
        'page' => $amendment->page,
        'line' => $amendment->line,
        'amendment_text' => $amendment->amendment_text,
        'supplement' => $amendment->supplement,
        'advice' => $amendment->advice,
        'advice_supplement' => $amendment->advice_supplement,
        'state' => $amendment->state,
        'owners_member' => $owners_member,
        'owners_branch' => $owners_branch,
        'backers' => $backers,
      );
      foreach ($data['meeting']['documents'][$document->id]['chapters'][$amendment->chapter]['pages'][$amendment->page]['amendments'][$amendment->id] as $key => &$value) {
        if (in_array($key, array('owners_member', 'owners_branch', 'backers'))) continue;
        $value = nl2br(check_plain($value));
      }
    }
  }
  $variables['meeting'] = $data['meeting'];
}

function template_preprocess_print_amendments_by_number(&$variables) {
  $data = _ammo_preprocess_meeting_data($variables); 
  $amendments_results = db_query("SELECT * FROM {ammo_amendments} WHERE state != 'concept' ORDER BY id");
  $backers = ammo_get_related_contacts($amendment->id, 'amendment', 'backer'); 
  foreach ($amendments_results as $amendment) {
    // Get owners.
    $owners_member = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'member'); 
    $owners_branch = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'branch'); 
    $backers = ammo_get_related_contacts($amendment->id, 'amendment', 'backer'); 
    $document = entity_load_single('document', $amendment->document_id);
    dpm($document);
    // Store amendment data.
    $data['meeting']['amendments'][$amendment->id] = array(
      'id' => $amendment->id,
      'document_id' => check_plain($amendment->document_id),
      'document_title' => check_plain($document->title),
      'chapter' => check_plain($amendment->chapter),
      'page' => check_plain($amendment->page),
      'line' => check_plain($amendment->line),
      'amendment_text' => check_plain($amendment->amendment_text),
      'supplement' => check_plain($amendment->supplement),
      'advice' => check_plain($amendment->advice),
      'advice_supplement' => check_plain($amendment->advice_supplement),
      'state' => $amendment->state,
      'owners_member' => $owners_member,
      'owners_branch' => $owners_branch,
      'backers' => $backers,
    );
    foreach ($data['meeting']['amendments'][$amendment->id] as $key => &$value) {
      if (in_array($key, array('owners_member', 'owners_branch', 'backers'))) continue;
      $value = nl2br(check_plain($value));
    }
  }
  $variables['meeting'] = $data['meeting'];
}

function template_preprocess_print_motions_by_branch(&$variables) {
  $data = _ammo_preprocess_meeting_data($variables); 
  $motions_results = db_query("SELECT * FROM {ammo_motions} WHERE meeting_id = :meeting_id AND state != 'concept'", array(":meeting_id" => $variables['values']['meeting']));
  foreach ($motions_results as $motion) {
    $owners_member = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'member'); 
    $owners_branch = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'branch'); 
    $backers = ammo_get_related_contacts($motion->id, 'motion', 'backer'); 
    $first_owner = ammo_get_first_owner('motion', $motion->id);
    $data['meeting']['branches'][$first_owner['branch_id']]['first_owner'] = $first_owner;
    $data['meeting']['branches'][$first_owner['branch_id']]['motions'][$motion->id] = array(
      'id' => $motion->id,
      'consideration_opening' => $motion->consideration_opening,
      'consideration_body' => $motion->consideration_body,
      'follow_up_opening' => $motion->follow_up_opening,
      'follow_up_body' => $motion->follow_up_body,
      'supplement' => $motion->supplement,
      'advice' => $motion->advice,
      'advice_supplement' => $motion->advice_supplement,
      'state' => $motion->state,
      'owners_member' => $owners_member,
      'owners_branch' => $owners_branch,
      'backers' => $backers,
    );
    foreach ($data['meeting']['branches'][$first_owner['branch_id']]['motions'][$motion->id] as $key => &$value) {
      if (in_array($key, array('owners_member', 'owners_branch', 'backers'))) continue;
      $value = nl2br(check_plain($value));
    }
  }
  $variables['meeting'] = $data['meeting'];
}

function template_preprocess_print_motions_by_number(&$variables) {
  $data = _ammo_preprocess_meeting_data($variables); 
  $motions_results = db_query("SELECT * FROM {ammo_motions} WHERE meeting_id = :meeting_id AND state != 'concept'", array(":meeting_id" => $variables['values']['meeting']));
  foreach ($motions_results as $motion) {
    $owners_member = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'member'); 
    $owners_branch = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'branch'); 
    $backers = ammo_get_related_contacts($motion->id, 'motion', 'backer'); 
    $data['meeting']['motions'][$motion->id] = array(
      'id' => $motion->id,
      'consideration_opening' => $motion->consideration_opening,
      'consideration_body' => $motion->consideration_body,
      'follow_up_opening' => $motion->follow_up_opening,
      'follow_up_body' => $motion->follow_up_body,
      'supplement' => $motion->supplement,
      'advice' => $motion->advice,
      'advice_supplement' => $motion->advice_supplement,
      'state' => $motion->state,
      'owners_member' => $owners_member,
      'owners_branch' => $owners_branch,
      'backers' => $backers,
    );
    foreach ($data['meeting']['motions'][$motion->id] as $key => &$value) {
      if (in_array($key, array('owners_member', 'owners_branch', 'backers'))) continue;
      $value = nl2br(check_plain($value));
    }
  }
  $variables['meeting'] = $data['meeting'];
}

function _ammo_preprocess_meeting_data(&$variables) {
  $meeting = entity_load_single('meeting', $variables['values']['meeting']);
  // Store meeting data.
  $data['meeting'] = array(
    'id' => $meeting->id,
    'title' => check_plain($meeting->title),
    'description' => check_plain($meeting->description),
    'date' => $meeting->date,
    'submission_closing_date' => $meeting->submission_closing_date,
    'withdrawal_closing_date' => $meeting->withdrawal_closing_date,
  );
  return $data;
}

/**
 * Implements hook_entity_info().
 */
function ammo_entity_info() {
  $info = array();

  $info['meeting'] = array(
    'label' => t('Meeting'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_meetings',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['document'] = array(
    'label' => t('Document'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_documents',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['amendment'] = array(
    'label' => t('Amendment'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_amendments',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['motion'] = array(
    'label' => t('Motion'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_motions',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['contact_relation'] = array(
    'label' => t('Contact (member or branch) relation to amendment or motion as either owner or backer'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_contact_relations',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  return $info;
}

function ammo_mail($key, &$message, $params) {
  global $base_url;
  $values = $params['values'];

  // Set reply-to header.
  $message['headers']['Reply-To'] = $params['reply_to'];

  // Create messages.
  switch($key) {
  case 'change_message':
    // Create messeage
    $type = ($values['entity']['entity_type'] == 'amendment') ? 'Amendement' : 'Motie';
    $message['subject'] = $type . ' nr. ' . $values['entity']['entity_id'] . '.';
    $message['body'][] = $values['entity']['markup'];
    $message['body'][] = '<h3>Wijzigingen</h3>';
    foreach ($values['differences'] as $key => $difference) {
      $message['body'][] = '<p>' . $key . ': ' . $difference . '</p>';
    }
    $path = $base_url . '/ammo/' . $values['entity']['entity_type'] . 's/' . $values['meeting_id'] . '#' . $values['entity']['entity_type'] . $values['entity']['entity_id'];
    $message['body'][] = '<p><a href="' . $path . '">Bekijk online</a></p>';
    break;
  case 'withdraw_ownership':
    // Create messeage
    if ($values['rest']) {
      $text = 'niet langer mede ingediend door';
    }
    else {
      $text = 'ingetrokken door';
    }
    $type = ($values['entity']['entity_type'] == 'amendment') ? 'Amendement' : 'Motie';
    $message['subject'] = $type . ' nr. ' . $values['entity']['entity_id'] . ' ' . $text . ' afdeling ' . $values['branch_display_name'];
    $message['body'][] = '<h3>' . ucfirst($text) . ' ' . $values['branch_display_name'] . '</h3>';
    $message['body'][] = $values['entity']['markup'];
    break;
  }
}

function ammo_intropage() {
  return theme('intropage', array(
    'add_access' => ammo_add_access(),
    'admin_access' => ammo_admin_access(),
    'superadmin_access' => ammo_superadmin_access(),
  ));
}
