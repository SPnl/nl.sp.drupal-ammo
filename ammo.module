<?php

/**
 * ammo_menu
 * ammo_theme
 * ammo_overview_content
 * ammo_entity_info
 */

/**
 * Implements hook_init().
 */
function ammo_init() {
  module_load_include("inc", "ammo", "ammo");
}

function ammo_menu() {
  $items = array();

  $items['ammo'] = array(
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_is_logged_in',
    'page callback' => 'ammo_intropage',
  );

  $items['ammo/ammo'] = array(
    'title' => 'Start',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['ammo/amendments'] = array(
    'title' => 'Overzicht amendementen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_overview_amendments_form', 2),
    'file' => 'amendments.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_is_logged_in',
    'weight' => 0,
  );

  $items['ammo/motions'] = array(
    'title' => 'Overzicht moties',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_overview_motions_form', 2),
    'file' => 'motions.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_is_logged_in',
    'weight' => 1,
  );

  $items['ammo/amendment'] = array(
    'title' => 'Amendement indienen / bewerken',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_amendment_form', 2, 3),
    'file' => 'amendment.form.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'ammo_add_access',
    'weight' => 2,
  );

  $items['ammo/motion'] = array(
    'title' => 'Motie indienen / bewerken',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_motion_form', 2, 3),
    'file' => 'motion.form.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'ammo_add_access',
    'weight' => 3,
  );

  $items['ammo/meeting'] = array(
    'title' => 'Bijeenkomst',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_meeting_form'),
    'file' => 'meeting.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ammo_superadmin_access',
    'weight' => 4,
  );

  $items['ammo/document'] = array(
    'title' => 'Document',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_document_form'),
    'file' => 'document.form.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ammo_superadmin_access',
    'weight' => 5,
  );

  $items['ammo/support/%/%/%'] = array(
    'title' => 'Steun',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ammo_support_form', 2, 3, 4),
    'file' => 'support.form.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
    'weight' => 6,
  );

  $items['ammo/autocomplete_members/%/%'] = array(
    'page callback' => 'ammo_autocomplete_members',
    'page arguments' => array(2, 3),
    'file' => 'ammo.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

function ammo_permission() {
  return array(
    'administer ammo' => array(
      'title' => 'Beheer ammo',
    ),
    'administer amendments and motions' => array(
      'title' => 'Beheer amendementen en moties',
    ),
    'add amendments and motions' => array(
      'title' => 'Voeg amendementen en moties toe',
    ),
  );
}

function ammo_superadmin_access() {
  return user_access('administer ammo');
}

function ammo_admin_access() {
  return user_access('administer ammo') || user_access('administer amendments and motions');
}

function ammo_add_access() {
  return user_access('administer ammo') || user_access('administer amendments and motions') || user_access('add amendments and motions');
}

function ammo_theme() {
  $theme = array(
    'overview_amendments' => array(
      'template' => 'amendments',
      'variables' => array(
      ),
    ),
    'overview_motions' => array(
      'template' => 'motions',
      'variables' => array(
      ),
    ),
    'amendment_form' => array(
      'render element' => 'form',
      'template' => 'amendment-form',
    ),
    'motion_form' => array(
      'render element' => 'form',
      'template' => 'motion-form',
    ),
    'meeting_form' => array(
      'render element' => 'form',
      'template' => 'meeting-form',
    ),
    'document_form' => array(
      'render element' => 'form',
      'template' => 'document-form',
    ),
    'amendment' => array(
      'variables' => array(),
      'template' => 'amendment',
    ),
    'motion' => array(
      'variables' => array(),
      'template' => 'motion',
    ),
  );
  return $theme;
}

function template_preprocess_amendment(&$variables) {
  if (isset($variables['entity_id'])) {
    $entity = entity_load_single('amendment', $variables['entity_id']);
    $document = entity_load_single('document', $entity->document_id);
    $meeting = entity_load_single('meeting', $document->meeting_id);
    $owners_member = ammo_get_related_contacts($entity->id, 'amendment', 'owner', 'member'); 
    $owners_branch = ammo_get_related_contacts($entity->id, 'amendment', 'owner', 'branch'); 
    $first_owner = array_values($owners_branch)[0];
    $backers = ammo_get_related_contacts($entity->id, 'amendment', 'backer', 'member'); 
    $backed_by_user = ammo_is_related($entity->id, 'amendment', 'backer');
    $vars = array(
      'backed' => $entity->backed,
      'document_id' => $entity->document_id,
      'type' => $entity->type,
      'general' => $entity->general,
      'chapter' => $entity->chapter,
      'page' => $entity->page,
      'line' => $entity->line,
      'action' => $entity->action,
      'supplement' => $entity->supplement,
      'current_text' => $entity->current_text,
      'new_text' => $entity->new_text,
      'advice' => $entity->advice,
      'advice_general' => $entity->advice_general,
      'advice_supplement' => $entity->advice_supplement,
      'advice_action' => $entity->advice_action,
      'advice_current_text' => $entity->advice_current_text,
      'advice_new_text' => $entity->advice_new_text,
      'state' => $entity->state,
      'document_title' => $document->title,
      'document_description' => $document->description,
      'meeting_id' => $meeting->id,
      'meeting_title' => $meeting->title,
      'meeting_description' => $meeting->description,
      'edit_access' => ammo_edit_access($first_owner->contact_id),
      'admin_access' => ammo_admin_access(),
      'owners_member' => $owners_member,
      'owners_branch' => $owners_branch,
      'first_owner' => $first_owner,
      'backers' => $backers,
      'backed_by_user' => $backed_by_user,
    );
    foreach($vars as $key => &$value) {
      if (in_array($key, array('owners_member', 'owners_branch', 'first_owner', 'backers'))) continue;
      $value = check_plain($value);
    }
    $variables = $variables + $vars;
  }
}

function template_preprocess_motion(&$variables) {
  if (isset($variables['entity_id'])) {
    $entity = entity_load_single('motion', $variables['entity_id']);
    $meeting = entity_load_single('meeting', $entity->meeting_id);
    $owners_member = ammo_get_related_contacts($entity->id, 'motion', 'owner', 'member'); 
    $owners_branch = ammo_get_related_contacts($entity->id, 'motion', 'owner', 'branch'); 
    $first_owner = array_values($owners_branch)[0];
    $backers = ammo_get_related_contacts($entity->id, 'motion', 'backer'); 
    $backed_by_user = ammo_is_related($entity->id, 'motion', 'backer');
    $vars = array(
      'meeting_id' => $entity->meeting_id,
      'backed' => $entity->backed,
      'consideration_opening' => $entity->consideration_opening,
      'consideration_body' => $entity->consideration_body,
      'follow_up_opening' => $entity->follow_up_opening,
      'follow_up_body' => $entity->follow_up_body,
      'supplement' => $entity->supplement,
      'advice' => $entity->advice,
      'advice_consideration_opening' => $entity->advice_consideration_opening,
      'advice_consideration_body' => $entity->advice_consideration_body,
      'advice_follow_up_opening' => $entity->advice_follow_up_opening,
      'advice_follow_up_body' => $entity->advice_follow_up_body,
      'advice_supplement' => $entity->advice_supplement,
      'state' => $entity->state,
      'meeting_title' => $meeting->title,
      'meeting_description' => $meeting->description,
      'edit_access' => ammo_edit_access($first_owner->contact_id),
      'admin_access' => ammo_admin_access(),
      'owners_member' => $owners_member,
      'owners_branch' => $owners_branch,
      'first_owner' => $first_owner,
      'backers' => $backers,
      'backed_by_user' => $backed_by_user,
    );
    foreach($vars as $key => &$value) {
      if (in_array($key, array('owners_member', 'owners_branch', 'first_owner', 'backers'))) continue;
      $value = check_plain($value);
    }
    $variables = $variables + $vars;
  }
}

function template_preprocess_overview_amendments(&$variables) {
  if (isset($variables['meeting_id'])) {
    $meeting = entity_load_single('meeting', $variables['meeting_id']);
    // Store meeting data.
    $data['meeting'][$meeting->id] = array(
      'id' => $meeting->id,
      'title' => check_plain($meeting->title),
      'description' => check_plain($meeting->description),
      'date' => $meeting->date,
      'submission_closing_date' => $meeting->submission_closing_date,
    );
    $documents_results = db_query("SELECT * FROM {ammo_documents} WHERE meeting_id = :meeting_id ORDER BY title", array(":meeting_id" => $variables['meeting_id']));
    foreach ($documents_results as $document) {
      // Store document data.
      $data['meetings'][$meeting->id]['documents'][$document->id] = array(
        'id' => $document->id,
        'title' => check_plain($document->title),
        'description' => check_plain($document->description),
        'meeting_id' => check_plain($document->meeting_id),
      );
      $amendments_results = db_query("SELECT id, type, chapter, page FROM {ammo_amendments} WHERE document_id = :document_id ORDER BY type, chapter, page, line, id", array(":document_id" => $document->id));
      foreach ($amendments_results as $amendment) {
        // Get owners.
        $owners_member = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'member'); 
        $owners_branch = ammo_get_related_contacts($amendment->id, 'amendment', 'owner', 'branch'); 
        $first_owner = array_values($owners_branch)[0];
        switch ($amendment->type) {
        case 'general':
          // Store amendment data.
          $data['meetings'][$meeting->id]['documents'][$document->id]['type'][$amendment->type]['amendments'][$amendment->id] = array(
            'id' => $amendment->id,
          );
          break;
        case 'specific':
          // Store chapter data.
          $data['meetings'][$meeting->id]['documents'][$document->id]['type'][$amendment->type]['chapters'][$amendment->chapter]['nr'] = $amendment->chapter;
          // Store page data.
          $data['meetings'][$meeting->id]['documents'][$document->id]['type'][$amendment->type]['chapters'][$amendment->chapter]['pages'][$amendment->page]['nr'] = $amendment->page;
          // Store amendment data.
          $data['meetings'][$meeting->id]['documents'][$document->id]['type'][$amendment->type]['chapters'][$amendment->chapter]['pages'][$amendment->page]['amendments'][$amendment->id] = array(
            'id' => $amendment->id,
            'chapter' => check_plain($amendment->chapter),
            'page' => check_plain($amendment->page),
            'owners_member' => $owners_member,
            'owners_branch' => $owners_branch,
            'first_owner' => $first_owner,
          );
          break;
        }
      }
    }
    $variables = $variables + $data;
  }
}

function template_preprocess_overview_motions(&$variables) {
  if (isset($variables['meeting_id'])) {
    $meeting = entity_load_single('meeting', $variables['meeting_id']);
    $data['meetings'][$meeting->id] = array(
      'id' => $meeting->id,
      'meeting_id' => $meeting->id,
      'title' => check_plain($meeting->title),
      'description' => check_plain($meeting->description),
      'date' => $meeting->date,
      'submission_closing_date' => $meeting->submission_closing_date,
    );
    $motions_results = db_query("SELECT id FROM {ammo_motions} WHERE meeting_id = :meeting_id", array(":meeting_id" => $meeting->id));
    foreach ($motions_results as $motion) {
      $owners_member = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'member'); 
      $owners_branch = ammo_get_related_contacts($motion->id, 'motion', 'owner', 'branch'); 
      $first_owner = array_values($owners_branch)[0];
      $data['meetings'][$meeting->id]['branches'][$first_owner['contact_id']] = $first_owner;
      $data['meetings'][$meeting->id]['branches'][$first_owner['contact_id']]['motions'][$motion->id] = array(
        'id' => $motion->id,
        'owners_member' => $owners_member,
        'owners_branch' => $owners_branch,
        'first_owner' => $first_owner,
      );
    }
    $variables = $variables + $data;
  }
}

/**
 * Implements hook_entity_info().
 */
function ammo_entity_info() {
  $info = array();

  $info['meeting'] = array(
    'label' => t('Meeting'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_meetings',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['document'] = array(
    'label' => t('Document'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_documents',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['amendment'] = array(
    'label' => t('Amendment'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_amendments',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['motion'] = array(
    'label' => t('Motion'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_motions',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['contact_relation'] = array(
    'label' => t('Contact (member or branch) relation to amendment or motion as either owner or backer'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'ammo_contact_relations',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  return $info;
}

function ammo_intropage() {
  $amendment_link = l('Amendement indienen', 'ammo/amendment', array('query' => array('destination' => 'ammo')));
  $motion_link = l('Motie indienen', 'ammo/motion', array('query' => array('destination' => 'ammo')));
  $content = <<<END
<div class="ammo-content">
  <ul>
    <li>{$amendment_link}</li>
    <li>{$motion_link}</li>
  </ul>
</div>
END;
  return $content;
}
